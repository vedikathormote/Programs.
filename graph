import java.util.*;
public class Newgraph {
    static class Edge{
        int src;
        int dest;
        Edge(int s,int d){
            this.src=s;
            this.dest=d;
        }

    }
    public static void creategraph( ArrayList<Edge>graph[]){
        for(int i=0;i<graph.length;i++){
            graph[i]=new ArrayList<Edge>();

        }
        graph[0].add(new Edge(0,1));
        graph[0].add(new Edge(0,4));
        graph[1].add(new Edge(1,0));
        graph[1].add((new Edge(1,2)));
        graph[1].add(new Edge(1,3));
        graph[2].add(new Edge(2,4));
        graph[3].add(new Edge(3,1));
        graph[3].add(new Edge(3,4));
        graph[4].add(new Edge(4,1));
        graph[4].add(new Edge(4,2));

    }

    public static void bfs( ArrayList<Edge>graph[],int V){
        Queue<Integer>q=new LinkedList<>();
        boolean vis[]=new boolean[V];
        q.add(0);
        while ((!q.isEmpty())){
            int curr=q.remove();
            if(vis[curr]==false){
                System.out.println(curr);
                vis[curr]=true;
                for(int i=0;i<graph[curr].size();i++){
                    Edge e=graph[curr].get(i);
                    q.add(e.dest);
                }
            }

        }

    }

    public static void dfs(  ArrayList<Edge>graph[],int curr,boolean vis[]){
        System.out.println(curr);
        vis[curr]=true;
        for(int i=0;i<graph[curr].size();i++){
            Edge e=graph[curr].get(i);
            if(vis[e.dest]==false){
            dfs(graph,e.dest,vis);
        }}



    }
    public static void main(String[] args) {
        int V=5;
        ArrayList<Edge>graph[]=new ArrayList[V];
        creategraph(graph);
        boolean vis[]=new boolean[V];
        for(int i=0;i<graph[3].size();i++){
            Edge e=graph[3].get(i);
            System.out.println(e.src+" "+ e.dest);

        }
        System.out.println("************");
        bfs(graph,V);
        System.out.println("***************");
        dfs(graph,0,vis);
        System.out.println();


    }
}
